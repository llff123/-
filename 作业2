1.上下文切换
  含义：先把前一个任务的cpu上下文（也就是CPU寄存器和程序计数器）保存起来，然后加载新任务的上下午到这些寄存器和程序计数器，最后跳转到程序计数器所指的新位置，运行新任务
2.进程上下午切换：是从一个进程切换到另外一个进程运行，需要保存虚拟内存、栈、全局变量等用户空间的资源，包括内核堆栈、寄存器等空间状态
3.线程上下文切换：
  线程是调度的基本单位，而进程是资源分配的基本单位
  内核中的任务调度，实际上的调度对象是线程，进程只是给线程提供了虚拟内存、全局变量等资源
  线程上下文切换分为两种情况：
    a.前后两个线程属于不同的进程，这时资源不共享，索引切换过程就是和进程上下文切换一样
    b.前后两个线程属于同个进程，此时虚拟内存共享，在切换时，共享资源保存不动，只需切换线程的私有资源，如寄存器等不共享的数据
4.中端上下午切换：为了快速响应硬件的事件，中断处理会打断进程的正常调度和执行，转而调用中断处理程序，响应设备事件，在打断其他进程时，需要将进程的当前状态保存下来，这样在中断结束之后，进程热仍然可以从原来的状态恢复运行
  上文总结：
    不管是哪种场景导致的上下文切换，都需要知道：
    1.CPU上下文切换，是保证Linux系统正常工作的核心功能之一，一般情况下不需特别关注
    2.但过多的上下文切换，会消耗大量CPU时间在寄存器、内核栈以及虚拟内存等数据的保存和恢复上，从而缩短进程真正的运行时间，导致系统的整体性能下降
    
vmstat：一个常用的系统性能分析工具，主要用来分析系统的内存使用情况，分析上下文切换和中断的次数
不同参数含义：
-a, --active          active/inactive memory  --显示活跃/不活跃的内存
-f, --forks           number of forks since boot  --自启动的fork数量
-m, --slabs           slabinfo  --显示slabs相关信息
-n, --one-header      do not redisplay header  --只在开始时显示一次各字段名称
-s, --stats           event counter statistics  --显示内存相关统计信息及多种系统活动数量
-d, --disk            disk statistics   --显示磁盘相关统计信息
-D, --disk-sum        summarize disk statistics   --总结磁盘统计信息
-p, --partition <dev> partition specific statistics --划分特定磁盘相关统计信息
-S, --unit <char>     define display unit --使用指定单位显示
-w, --wide            wide output --宽输出
-t, --timestamp       show timestamp  --显示时间戳
-h, --help            display this help and exit  --显示帮助和退出
-V, --version         output version information and exit --输出版本信息和退出

操作分析过程：
1.在第一个终端里运行sysbench，模拟系统多线程调度的瓶颈
  sysbench --threads=10 --time=300 threads run(运行10个线程跑5分钟，模拟多线程切换)
2.多开窗口，输入vmstat 3--每隔3s输出一组数据
    procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
     r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
     9  0      0 1396076    172 323816    0    0    15  9585  268  638 20  1 75  4  0
     5  0      0 1396076    172 323816    0    0     0     0 42696 1971491 18 69 13  0  0
     6  0      0 1396076    172 323816    0    0     0     0 43288 1925472 18 70 12  0  0
     5  0      0 1396076    172 323816    0    0     0     0 42670 2006475 18 70 12  0  0
     7  0      0 1396116    172 323816    0    0     0     0 40278 1859488 18 69 13  0  0

  pros（r：表示运行和等待CPU时间片的进程数，这个值如果长期大于CPU数，说明CPU不足，出现了过载
        b：表示在等待资源的进程数，比如正在等待I/O或者内存交换）
  memory（sqpd：表示切换到内存交互区的内存大小，单位kb，也就是虚拟内存的大小
          free：表示当前空闲的物理内存，单位kb
          buffer：表示buffercached内存大小，也就是缓冲大小，一般对块设备的读写才需要缓冲
          cache：表示pagecache的内存大小，也就是缓存大小，一般为文件系统进程缓存
  ）频繁访问的文件都会缓存，如果cache值非常大说明缓存文件比较多，这个时候io中bi比较小，说明文件系统效率比较好
  swap（si：内存进入到内存交换区的内存大小
        so：内存交换区进入到内存的内存大小）一般情况下，si、so的值都为0，如果长期不为0，说明系统内存不足，需要增加系统内存
  io（bi：读磁盘，单位kb/s
      bo：写磁盘，单位kb/s）
  system（in：表示某一时间间隔内的每秒设备中断数
          cs：表示每次产生的上下文切换次数
  ）这两个值越大，则由内核消耗的CPU就越多
  cpu（us：用户态CPU占用的百分比，us值越高，说明用户进程消耗CPU时间越多
       sy：系统内核进程消耗的CPU时间的百分比-----一般来说us+sy应该小于80%，如果大于80%，说明CPU处于瓶颈
       id：表示CPU处于空闲状态的时间百分比
       wa：表示等待CPU的时间百分比，wa值越高，说明I/O等待越严重，参考值：不超过20%）
 
